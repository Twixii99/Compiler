METHOD_BODY --> STATEMENT_LIST
STATEMENT_LIST --> STATEMENT ANOTHER_STATEMENT
STATEMENT --> DECLARATION
DECLARATION --> PRIMITIVE_TYPE id ;
PRIMITIVE_TYPE --> int
match: int
match: id
match: ;
ANOTHER_STATEMENT --> STATEMENT ANOTHER_STATEMENT
STATEMENT --> ASSIGNMENT
ASSIGNMENT --> id assign EXPRESSION ;
match: id
match: assign
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION2
SIMPLE_EXPRESSION --> TERM ANOTHER_EXPRESSION
TERM --> FACTOR ANOTHER_TERM
FACTOR --> num
match: num
ANOTHER_TERM --> ~
ANOTHER_EXPRESSION --> ~
EXPRESSION2 --> ~
match: ;
ANOTHER_STATEMENT --> STATEMENT ANOTHER_STATEMENT
STATEMENT --> IF
IF --> if ( EXPRESSION ) { STATEMENT } else { STATEMENT }
match: if
match: (
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION2
SIMPLE_EXPRESSION --> TERM ANOTHER_EXPRESSION
TERM --> FACTOR ANOTHER_TERM
FACTOR --> id
match: id
ANOTHER_TERM --> ~
ANOTHER_EXPRESSION --> ~
EXPRESSION2 --> relop SIMPLE_EXPRESSION
match: relop
SIMPLE_EXPRESSION --> TERM ANOTHER_EXPRESSION
TERM --> FACTOR ANOTHER_TERM
FACTOR --> num
match: num
ANOTHER_TERM --> ~
ANOTHER_EXPRESSION --> ~
match: )
match: {
STATEMENT --> ASSIGNMENT
ASSIGNMENT --> id assign EXPRESSION ;
match: id
match: assign
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION2
SIMPLE_EXPRESSION --> TERM ANOTHER_EXPRESSION
TERM --> FACTOR ANOTHER_TERM
FACTOR --> num
match: num
ANOTHER_TERM --> ~
ANOTHER_EXPRESSION --> ~
EXPRESSION2 --> ~
match: ;
match: }
match: else
match: {
STATEMENT --> ASSIGNMENT
ASSIGNMENT --> id assign EXPRESSION ;
match: id
match: assign
EXPRESSION --> SIMPLE_EXPRESSION EXPRESSION2
SIMPLE_EXPRESSION --> TERM ANOTHER_EXPRESSION
TERM --> FACTOR ANOTHER_TERM
FACTOR --> num
match: num
ANOTHER_TERM --> ~
ANOTHER_EXPRESSION --> ~
EXPRESSION2 --> ~
match: ;
match: }
ANOTHER_STATEMENT --> ~
