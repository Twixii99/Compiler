STATEMENT_LIST ==> <float , STATEMENT ANOTHER_STATEMENT> ; <id , STATEMENT ANOTHER_STATEMENT> ; <if , STATEMENT ANOTHER_STATEMENT> ; <int , STATEMENT ANOTHER_STATEMENT> ; <while , STATEMENT ANOTHER_STATEMENT> ; 


STATEMENT ==> <float , DECLARATION> ; <id , ASSIGNMENT> ; <if , IF> ; <int , DECLARATION> ; <while , WHILE> ; 


DECLARATION ==> <float , PRIMITIVE_TYPE id ;> ; <int , PRIMITIVE_TYPE id ;> ; 


PRIMITIVE_TYPE ==> <float , float> ; <int , int> ; 


WHILE ==> <while , while ( EXPRESSION ) { STATEMENT }> ; 


FACTOR ==> <( , ( EXPRESSION )> ; <id , id> ; <num , num> ; 


ASSIGNMENT ==> <id , id assign EXPRESSION ;> ; 


EXPRESSION ==> <( , SIMPLE_EXPRESSION EXPRESSION2> ; <+ , SIMPLE_EXPRESSION EXPRESSION2> ; <- , SIMPLE_EXPRESSION EXPRESSION2> ; <id , SIMPLE_EXPRESSION EXPRESSION2> ; <num , SIMPLE_EXPRESSION EXPRESSION2> ; 


IF ==> <if , if ( EXPRESSION ) { STATEMENT } else { STATEMENT }> ; 


ANOTHER_STATEMENT ==> <float , STATEMENT ANOTHER_STATEMENT> ; <id , STATEMENT ANOTHER_STATEMENT> ; <if , STATEMENT ANOTHER_STATEMENT> ; <int , STATEMENT ANOTHER_STATEMENT> ; <while , STATEMENT ANOTHER_STATEMENT> ; <~ , ~> ; 


ANOTHER_TERM ==> <mulop , mulop FACTOR ANOTHER_TERM> ; <~ , ~> ; 


EXPRESSION2 ==> <relop , relop SIMPLE_EXPRESSION> ; <~ , ~> ; 


SIMPLE_EXPRESSION ==> <( , TERM ANOTHER_EXPRESSION> ; <+ , SIGN TERM ANOTHER_EXPRESSION> ; <- , SIGN TERM ANOTHER_EXPRESSION> ; <id , TERM ANOTHER_EXPRESSION> ; <num , TERM ANOTHER_EXPRESSION> ; 


TERM ==> <( , FACTOR ANOTHER_TERM> ; <id , FACTOR ANOTHER_TERM> ; <num , FACTOR ANOTHER_TERM> ; 


METHOD_BODY ==> <float , STATEMENT_LIST> ; <id , STATEMENT_LIST> ; <if , STATEMENT_LIST> ; <int , STATEMENT_LIST> ; <while , STATEMENT_LIST> ; 


ANOTHER_EXPRESSION ==> <addop , addop TERM ANOTHER_EXPRESSION> ; <~ , ~> ; 


SIGN ==> <+ , +> ; <- , -> ; 


